<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Map
        java.util.Set
        java.util.HashSet
        java.util.HashMap
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.component.EndpointComponentDefinition
        org.talend.components.api.component.InputComponentDefinition
        org.talend.components.api.component.OutputComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.container.RuntimeContainer
        org.talend.daikon.properties.Property
        org.talend.daikon.NamedThing
		org.talend.designer.core.generic.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IElementParameter
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.EParameterFieldType
        "
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
List<IMetadataColumn> columnList = null;
boolean hasDynamic = false;
String dynamicColName = null;
int dynamicPos = -1;
if ((metadatas != null) && (metadatas.size() > 0)) { // metadata

	metadata = metadatas.get(0);
	if(metadata != null){
	    columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();

		hasDynamic = false;

		int pos = 0;
		for (IMetadataColumn column : columnList) {
			if (column.getTalendType().equals("id_Dynamic")) {
				hasDynamic = true;
				dynamicPos = pos;
				dynamicColName = column.getLabel();
				break;
			}
			pos++;
		}
	}
}
%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();
<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> = (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createRuntimeProperties();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
	List<NamedThing> properties = propInfo.props.getProperties();
	for (NamedThing prop : properties) { // property
        if (prop instanceof Property) { // if, only deal with valued Properties
            Property property = (Property)prop;
            if (property.getFlags() != null && (property.getFlags().contains(Property.Flags.DESIGN_TIME_ONLY) || property.getFlags().contains(Property.Flags.HIDDEN)))
            	continue;
		    Object value = property.getValue();
            if (value != null && (value instanceof List)) { // if
                    // added for the support of tables
                        String tmpVarName = cid+propInfo.fieldName.replace('.','_')+"_"+property.getName();
                        %>
                        java.util.List<String> <%=tmpVarName %> = new java.util.ArrayList<String>();
                        <%
                        for (String subPropertyValue : (java.util.List<String>)property.getValue()) {
                            if ((property.getType() == Property.Type.BOOLEAN) || (property.getType() == Property.Type.ENUM)) {
                            %>
                                <%=tmpVarName %>.add("<%=subPropertyValue %>");
                            <%
                            } else {
                            	if(!"".equals(subPropertyValue)) {
                            %>
                                <%=tmpVarName %>.add(<%=subPropertyValue %>);
                            <%
                            	} else {
                            %>
                                <%=tmpVarName %>.add("");
                            <%
                            	}
                            }
                        }
                        %>
                        ((org.talend.daikon.properties.Properties)props_<%=cid %><%=propInfo.fieldName%>).setValue("<%=property.getName()%>",<%=tmpVarName %>);
                    <%
            }  else if (property.isFlag(Property.Flags.ENCRYPT) && ElementParameterParser.canEncryptValue(property.getStringValue())) {
                    %>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                    routines.system.PasswordEncryptUtil.decryptPassword(<%=component.getCodegenValue(property, property.getStringValue())%>));
                    <%
            } else if (value != null && Property.Type.DATE.equals(property.getType())){
            		%>
    				props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
	                	TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",<%=component.getCodegenValue(property, property.getStringValue())%>));
    				<%
            } else if (value != null && (!(value instanceof String) || !((String)value).equals(""))) { // if
					%>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                    <%=component.getCodegenValue(property, property.getStringValue())%>);
                    <%
    		} // if
        }//else may be a ComponentProperties so ignore
	} // property
} // propInfo
%>
org.talend.components.api.container.RuntimeContainer container_<%=cid%> = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "<%=cid%>";
    }
};

<%
if (def instanceof EndpointComponentDefinition) {
%>
	org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_<%=cid%> = ((org.talend.components.api.component.EndpointComponentDefinition)def_<%=cid%>).getRuntime();
	sourceOrSink_<%=cid%>.initialize(container_<%=cid%>, props_<%=cid%>);
	org.talend.daikon.properties.ValidationResult vr_<%=cid%> = sourceOrSink_<%=cid%>.validate(container_<%=cid%>);
	if (vr_<%=cid%>.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
		throw new RuntimeException(vr_<%=cid%>.getMessage());
	}
<%
}

if (metadata != null) {
	if (def instanceof InputComponentDefinition) {
%>
		org.talend.components.api.component.runtime.Source source_<%=cid%> = (org.talend.components.api.component.runtime.Source)sourceOrSink_<%=cid%>;
		org.talend.components.api.component.runtime.Reader reader_<%=cid%> = source_<%=cid%>.createReader(container_<%=cid%>);

		<%
		IConnection main = null;
		List<? extends IConnection> mains = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
		if(mains!=null && !mains.isEmpty()) {
			main = mains.get(0);
		}
		
		IConnection reject = null;
    	for(IConnection outConn : node.getOutgoingConnections()) {
    		if(!outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			continue;
    		}
    		
    		if(main!=null && main.getName().equals(outConn.getName())) {
    			continue;
    		}
    		
    		reject = outConn;
    		
    		break;
    	}
		
		boolean hasDataOutput = main!=null || reject!=null;
		
		// FIXME - multiple outgoing connections?
		
        if(hasDataOutput) {
        	if(hasDynamic){
        	%>
        		boolean initDyn_<%=cid%> = false;
        		routines.system.Dynamic dynamic_<%=cid%> = new routines.system.Dynamic();
        	<%
        	}
        	
        	IConnection schemaSourceConnector = (main!=null ? main : reject);
			String schemaSourceConnectorName = schemaSourceConnector.getMetadataTable().getAttachedConnector();
        	%>
        		boolean multi_output_is_allowed_<%=cid%> = false;
            	<% //take care SourceOrSink.validate will change the schema if it contains include-all-fields, so need to get design Avro schema before validate %>
                org.talend.components.api.component.Connector c_<%=cid%> = null;
                for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, true)) {
                    if (currentConnector.getName().equals("<%=schemaSourceConnectorName%>")) {
                        c_<%=cid%> = currentConnector;
                    }
                    
                    if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                        multi_output_is_allowed_<%=cid%> = true;
                    }
                }
                org.apache.avro.Schema schema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, true);

                org.talend.daikon.talend6.Talend6OutgoingSchemaEnforcer current_<%=cid%> = new org.talend.daikon.talend6.Talend6OutgoingSchemaEnforcer(schema_<%=cid%>, false);
                
                // Create a reusable factory that converts the output of the reader to an IndexedRecord.
                org.talend.daikon.avro.IndexedRecordAdapterFactory<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_<%=cid%> = null;

		<%
		}
		%>
                // Iterate through the incoming data.
                for(boolean available = reader_<%=cid%>.start(); available; available = reader_<%=cid%>.advance()) {//}
		<%
		if(hasDataOutput) {
		%>
					if(multi_output_is_allowed_<%=cid%>) {
						<%if(main!=null){%>
						<%=main.getName()%> = null;
						<%}%>
						
						<%if(reject!=null){%>
						<%=reject.getName()%> = null;
						<%}%>
					}
					
					try {
						Object data_<%=cid%> = reader_<%=cid%>.getCurrent();
						
						<%if(main!=null){%>
						
						if(multi_output_is_allowed_<%=cid%>) {
							<%=main.getName()%> = new <%=main.getName() %>Struct();
						}
					
	                    // Construct the factory once when the first data arrives.
	                    if (factory_<%=cid%> == null)
	                        factory_<%=cid%> = (org.talend.daikon.avro.IndexedRecordAdapterFactory<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
	                                .createAdapterFactory(data_<%=cid%>.getClass());
	
	                    // Enforce the outgoing schema on the input.
	                    org.apache.avro.generic.IndexedRecord unenforced_<%=cid%> = factory_<%=cid%>.convertToAvro(data_<%=cid%>);
	                    current_<%=cid%>.setWrapped(unenforced_<%=cid%>);
	                    
	                    <%
						if(hasDynamic){
						%>
							if(!initDyn_<%=cid%>){
								org.apache.avro.Schema dynSchema_<%=cid%> = current_<%=cid%>.getOutgoingDynamicRuntimeSchema();
	
								for(org.apache.avro.Schema.Field childDynamic_<%=cid%> : dynSchema_<%=cid%>.getFields()){
									routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
							    	dynamicMetadata_<%=cid%>.setName(childDynamic_<%=cid%>.name());
							    	dynamicMetadata_<%=cid%>.setDbName(childDynamic_<%=cid%>.name());
							    	String talendType_<%=cid%> = null;
							    	if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ARRAY){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.LIST.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BOOLEAN){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.BOOLEAN.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BYTES){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.BYTE_ARRAY.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FIXED){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.BYTE_ARRAY.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.DOUBLE){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.DOUBLE.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FLOAT){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.FLOAT.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.INT){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.INTEGER.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.LONG){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.LONG.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ENUM){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.STRING.getId()%>";
							    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.STRING){
							    		talendType_<%=cid%> = "<%=JavaTypesManager.STRING.getId()%>";
							    	}
							    	dynamicMetadata_<%=cid%>.setType(talendType_<%=cid%>);
							    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
								}
								initDyn_<%=cid%> = true;
							}
							dynamic_<%=cid%>.clearColumnValues();
	                    <%
	                    }
	                    
	                    List<IMetadataColumn> main_output_columnList = main.getMetadataTable().getListColumns();
	                    
	                    for (int i = 0; i < main_output_columnList.size(); i++) {
	                        IMetadataColumn column = main_output_columnList.get(i);
	                        String columnName = column.getLabel();
	                        JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	                        if(columnName.equals(dynamicColName)){
	                        %>
	                        	java.util.Map<String, Object> dynamicValue_<%=cid%> = (java.util.Map<String, Object>)current_<%=cid%>.get(<%=i%>);
	                        	for(String dynamicValue_Key_<%=cid%> : dynamicValue_<%=cid%>.keySet()){
	                        		dynamic_<%=cid%>.setColumnValue(dynamic_<%=cid%>.getIndex(dynamicValue_Key_<%=cid%>), dynamicValue_<%=cid%>.get(dynamicValue_Key_<%=cid%>));
	                        	}
								<%=main.getName()%>.<%=dynamicColName%> = dynamic_<%=cid%>;
	                        <%
	                        }else{
	                        %>
	                        	if(current_<%=cid%>.get(<%=i%>) == null){
	                        		<%=main.getName()%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
	                        	}else{
	                        		<%if(javaType == JavaTypesManager.STRING){%>
	                        			<%=main.getName()%>.<%=columnName%> = String.valueOf(current_<%=cid%>.get(<%=i%>));
	                        		<%}else{%>
		                        		<%=main.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)(current_<%=cid%>.get(<%=i%>));
		                        	<%}%>
	                        	}
	                    	<%
	                    	}
	                    }
	                    %>
	                    
                	<%}%>
        		} catch (org.talend.components.api.exception.DataRejectException e_<%=cid%>) {
					<%if(reject!=null){%>
					java.util.Map<String,Object> info_<%=cid%> = e_<%=cid%>.getRejectInfo();
					Object data_<%=cid%> = info_<%=cid%>.get("talend_record");
					
					if(multi_output_is_allowed_<%=cid%>) {
						<%=reject.getName()%> = new <%=reject.getName() %>Struct();
					}
				
                    // Construct the factory once when the first data arrives.
                    if (factory_<%=cid%> == null)
                        factory_<%=cid%> = (org.talend.daikon.avro.IndexedRecordAdapterFactory<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
                                .createAdapterFactory(data_<%=cid%>.getClass());

                    // Enforce the outgoing schema on the input.
                    org.apache.avro.generic.IndexedRecord unenforced_<%=cid%> = factory_<%=cid%>.convertToAvro(data_<%=cid%>);
                    current_<%=cid%>.setWrapped(unenforced_<%=cid%>);
                    
                    <%
					if(hasDynamic){
					%>
						if(!initDyn_<%=cid%>){
							org.apache.avro.Schema dynSchema_<%=cid%> = current_<%=cid%>.getOutgoingDynamicRuntimeSchema();

							for(org.apache.avro.Schema.Field childDynamic_<%=cid%> : dynSchema_<%=cid%>.getFields()){
								routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
						    	dynamicMetadata_<%=cid%>.setName(childDynamic_<%=cid%>.name());
						    	dynamicMetadata_<%=cid%>.setDbName(childDynamic_<%=cid%>.name());
						    	String talendType_<%=cid%> = null;
						    	if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ARRAY){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.LIST.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BOOLEAN){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.BOOLEAN.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BYTES){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.BYTE_ARRAY.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FIXED){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.BYTE_ARRAY.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.DOUBLE){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.DOUBLE.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FLOAT){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.FLOAT.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.INT){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.INTEGER.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.LONG){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.LONG.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ENUM){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.STRING.getId()%>";
						    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.STRING){
						    		talendType_<%=cid%> = "<%=JavaTypesManager.STRING.getId()%>";
						    	}
						    	dynamicMetadata_<%=cid%>.setType(talendType_<%=cid%>);
						    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
							}
							initDyn_<%=cid%> = true;
						}
						dynamic_<%=cid%>.clearColumnValues();
                    <%
                    }
                    
                    Set<String> commonColumns = new HashSet<String>();
                    
                    for (int i = 0; i < columnList.size(); i++) {
                        IMetadataColumn column = columnList.get(i);
                        String columnName = column.getLabel();
                        
                        commonColumns.add(columnName);
                        
                        JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
                        if(columnName.equals(dynamicColName)){
                        %>
                        	java.util.Map<String, Object> dynamicValue_<%=cid%> = (java.util.Map<String, Object>)current_<%=cid%>.get(<%=i%>);
                        	for(String dynamicValue_Key_<%=cid%> : dynamicValue_<%=cid%>.keySet()){
                        		dynamic_<%=cid%>.setColumnValue(dynamic_<%=cid%>.getIndex(dynamicValue_Key_<%=cid%>), dynamicValue_<%=cid%>.get(dynamicValue_Key_<%=cid%>));
                        	}
							<%=main.getName()%>.<%=dynamicColName%> = dynamic_<%=cid%>;
                        <%
                        }else{
                        %>
                        	if(current_<%=cid%>.get(<%=i%>) == null){
                        		<%=main.getName()%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
                        	}else{
                        		<%if(javaType == JavaTypesManager.STRING){%>
                        			<%=main.getName()%>.<%=columnName%> = String.valueOf(current_<%=cid%>.get(<%=i%>));
                        		<%}else{%>
	                        		<%=main.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)(current_<%=cid%>.get(<%=i%>));
	                        	<%}%>
                        	}
                    	<%
                    	}
                    }
                    
                    //pass error columns
            		List<IMetadataColumn> rejectColumns = reject.getMetadataTable().getListColumns();
            		for(IMetadataColumn column : rejectColumns) {
            			String columnName = column.getLabel();
            			
            			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
                        
            			//error columns
            			if(!commonColumns.contains(columnName)) {
            			%>
            			<%=reject.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)info_<%=cid%>.get("<%=columnName%>");
            			<%
            			}
            		}
                    %>
	                    
					<%}%>
				}
        <%
		}
	} else if (def instanceof OutputComponentDefinition) {
	%>
		org.talend.components.api.component.runtime.Sink sink_<%=cid%> = (org.talend.components.api.component.runtime.Sink)sourceOrSink_<%=cid%>;
		org.talend.components.api.component.runtime.WriteOperation writeOperation_<%=cid%> = sink_<%=cid%>.createWriteOperation();
		writeOperation_<%=cid%>.initialize(container_<%=cid%>);<%//create folder for file; create database/table for db%>
		org.talend.components.api.component.runtime.Writer writer_<%=cid%> = writeOperation_<%=cid%>.createWriter(container_<%=cid%>);
		writer_<%=cid%>.open("<%=cid%>");
        org.talend.components.api.component.Connector c_<%=cid%> = null;
        for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_<%=cid%> = currentConnector;
                break;
            }
        }
        org.apache.avro.Schema designSchema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, true);
        org.talend.daikon.talend6.Talend6IncomingSchemaEnforcer current_<%=cid%>
                = new org.talend.daikon.talend6.Talend6IncomingSchemaEnforcer(designSchema_<%=cid%>);
	<%
	}
}
%>
