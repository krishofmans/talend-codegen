<%@ jet
imports="
        java.util.List
        java.util.Set
        java.util.HashSet
        org.talend.components.api.component.ComponentDefinition
        org.talend.designer.core.generic.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.TalendTextUtils
        "
%>
// main of generic (used only for output components)

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentDefinition def = component.getComponentDefinition();

if(def instanceof org.talend.components.api.component.OutputComponentDefinition){
    %>

    // OUTPUT

    <%
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    if (outgoingConns!=null){
        for (int i = 0; i < outgoingConns.size(); i++) {
            IConnection outgoingConn = outgoingConns.get(i);
            if (outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>
                <%=outgoingConn.getName()%> = null;
            <%
            }
        }
    }

    List<IMetadataTable> metadatas = node.getMetadataList();
    IMetadataTable metadata;
    if ((metadatas != null) && (metadatas.size() > 0) && (metadata = metadatas.get(0)) != null) { // metadata
        List<IMetadataColumn> columnList = metadata.getListColumns();
        int dynamicPos = -1;
        for (int i = 0; i < columnList.size(); i++) {
            if (columnList.get(i).getTalendType().equals("id_Dynamic")) {
                dynamicPos = i;
                break;
            }
        }
        %>
        // METADATA
        <%

        List< ? extends IConnection> conns = node.getIncomingConnections();
        for (IConnection conn : conns) { // conn
            // If there are dynamic columns in the schema, they need to be
            // initialized into the runtime schema of the actual IndexedRecord
            // provided to the component.
            if (dynamicPos != -1)  {
                %>
                if (current_<%=cid%>.needsInitDynamicColumns()) {
                    // Initialize the dynamic columns when they are first encountered.
                    for (routines.system.DynamicMetadata dm_<%=cid%> : <%=conn.getName()%>.<%=columnList.get(dynamicPos).getLabel()%>.metadatas) {
                        current_<%=cid%>.initDynamicColumn(
                                dm_<%=cid%>.getName(), dm_<%=cid%>.getDbName(),
                                dm_<%=cid%>.getType(), dm_<%=cid%>.getDbType(),
                                dm_<%=cid%>.getDbTypeId(), dm_<%=cid%>.getLength(),
                                dm_<%=cid%>.getPrecision(), dm_<%=cid%>.getFormat(),
                                dm_<%=cid%>.getDescription(), dm_<%=cid%>.isKey(),
                                dm_<%=cid%>.isNullable(),
                                dm_<%=cid%>.getRefFieldName(), dm_<%=cid%>.getRefModuleName());
                    }
                    current_<%=cid%>.initDynamicColumnsFinished();
                }
                <%
            }

            if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // conn line style
                for (int i = 0; i < columnList.size(); i++) { // column
                    IMetadataColumn column = columnList.get(i);
                    if (dynamicPos != i) {
                        %>
                        current_<%=cid%>.put("<%=column.getLabel()%>", <%=conn.getName()%>.<%=column.getLabel()%>);
                        <%
                    } else {
                        %>
                        for (int i = 0; i < <%=conn.getName()%>.<%=column.getLabel()%>.getColumnCount(); i++) {
                            current_<%=cid%>.put(<%=conn.getName()%>.<%=column.getLabel()%>.getColumnMetadata(i).getName(),
                                    <%=conn.getName()%>.<%=column.getLabel()%>.getColumnValue(i));
                        }
                        <%
                    }
                } // column
                %>
                
                Object data_<%=cid%> = current_<%=cid%>.createIndexedRecord();
                
                try {
                	writer_<%=cid%>.write(data_<%=cid%>);
                	<%
                	//pass the main flow
                	IConnection main = null;
                	List<? extends IConnection> mains = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
                	if(mains!=null && !mains.isEmpty()) {
                		main = mains.get(0);
                		%>
                		<%=main.getName()%> = new <%=main.getName() %>Struct();
                		<%
                		for (IMetadataColumn column : columnList) {
	                		%>
	                		<%=main.getName()%>.<%=column.getLabel()%> = <%=conn.getName()%>.<%=column.getLabel()%>;
	                		<%
                		}
                		
                		//TODO how to pass the additional columns in output connection? like salesforce_id
                	}
                	%>
                } catch (org.talend.components.api.exception.DataRejectException e_<%=cid%>) {
                	<%
                	//pass the reject flow
                	//the method below can't wrok now, TODO fix it
                	//List<? extends IConnection> rejects = node.getOutgoingConnections(EConnectionType.REJECT);
                	
                	IConnection reject = null;
                	for(IConnection outConn : node.getOutgoingConnections()) {
                		if(!outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                			continue;
                		}
                		
                		if(main!=null && main.getName().equals(outConn.getName())) {
                			continue;
                		}
                		
                		reject = outConn;
                		
                		break;
                	}
                	
                	if(reject!=null) {
                		Set<String> commonColumns = new HashSet<String>();
                		%>
                		<%=reject.getName()%> = new <%=reject.getName() %>Struct();
                		<%
                		for (IMetadataColumn column : columnList) {
                			commonColumns.add(column.getLabel());
	                		%>
	                		<%=reject.getName()%>.<%=column.getLabel()%> = <%=conn.getName()%>.<%=column.getLabel()%>;
	                		<%
                		}
                		%>
                		
                		java.util.Map<String,Object> info_<%=cid%> = e_<%=cid%>.getRejectInfo();
                		
                		<%
                		//pass error columns
                		List<IMetadataColumn> rejectColumns = reject.getMetadataTable().getListColumns();
                		for(IMetadataColumn column : rejectColumns) {
                			String columnName = column.getLabel();
                			
                			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	                        
                			//error columns
                			if(!commonColumns.contains(columnName)) {
                			%>
                			<%=reject.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)info_<%=cid%>.get("<%=columnName%>");
                			<%
                			}
                		}
                	}
                	%>
                }
            <%
            } // conn line style
        } // conn
    } // metadata
} // canStart
%>
